/*:
 [Оглавление](HEADER)
 # Multithearding / Многопоточность
 
 Многопоточность позволяет распределять задачи по потокам и одновременно (или последовательно) выполнять их.
 
 ### Основные понятия
 
 * __Thread (поток)__ - последовательность инструкций, которая может быть выполнена независимо от отслального кода программы.
 * __Queue (очередь)__ - множество выполняемых задач, абстракция, используемая Apple в GCD и Operation, позволяющая не опускаться на уровень потоков.
 * __Task (задача)__ - набор инструкций (функция или замыкание), которые выполняются в рамках определенной очереди на некотором потоке.
 
 ### Типы многопоточности
 
 * __Parallelism__ - Выполнение нескольких задач в одно и то же время на нескольких процессорных ядрах.
 * __Concurrency__ - выполнение нескольких задач в одно время на одном процессорном ядре с помощью *Context switching*
 
 ### Типы очередей
 
 * __Serial (sync)__ - Текущий поток прекращает встает в режим ожидания до тех пор, пока не будет заверш другой поток.
 * __Concurrent (async)__ - Текущйи поток продолжает выполнение паралельно с другим потоком.
 
 ### Реализация мультипоточности в Swift
 
 __О них нужно знать:__
 * [pthread](Multithearding%20-%20pthread) - низкоуровневая работа с потоками с помощью синтаксиса С
 * [Thread class](Multithearding%20-%20Thread) - первый уровень абстракции над pthreads
 * ??? [NSObject](Multithearding%20-%20NSObject) - имеет ряд методов, использующих класс Thread
 
 __Их нужно использовать:__
 * [Grand Central Dispatch](Multithearding%20-%20GCD)
 * [Operation](Multithearding%20-%20Operation)
 * Async/await & Actors (доступно в iOS 15+)
 
 ### Quality of Service, QoS - типы приоритетов потоков
 Для каждого потока может быть определен приоритет
 
 * __background__ - самый низкий, когда время выполнения задачи не имеет значения. Например синхронизация или индексация.
 * __utility__ - для слежубных операций, требующих значительного времени для выполнения. Например, импорт или обработка большого количества данных.
 * __default__ - средний приоритет, используется по-умолчанию.
 * __userInitiated__ - высокий приоритет, используется для задачи инициированных пользователем, если он ожидает их немедленного выполнения. Например загрузка полноразмерного изображения при нажатии на превью.
 * __userInteractive__ - самый высокий приоритет. используется для обновления/перемещения элементов интерфейса.
 
 ### Возможные проблемы использования потоков
 
 * [Race Condition](Multithearding%20-%20Race%20Condition)
 * [Deadlock](Multithearding%20-%20Deadlock)
 * Livelock
 * [Priority Inversion](Multithearding%20-%20Priority%20Inversion)
 
 ### Синхронизация данных
 
 Используется для обеспечения защиты объектов от некорретных изменений, возникающих из-за одновременного доступа сразу с нескольких потоков.
 
 * Mutex
    * [pthread_mutex_t](Multithearding%20-%20pthread) - мьютексы для pthread_t
    * [NSLock](Multithearding%20-%20NSLock) - блокировки (без условий)
    * NSConditionLock
    * NSDestributedLock
 * Условие
    * [pthread_cond_t](Multithearding%20-%20pthread)
    * [NSCondition](Multithearding%20-%20NSCondition)
 * [Semaphore (Семофор)](Multithearding%20-%20Semaphore)
 * Другие
    * pthread_rwlock_t - read-write lock, защита данных независимо для чтения и записи (реализации в Foundation нет,используем С-шные типы)
    * unfair lock - что был виден, нужно импортировать Darwin, например через Foundation или UIKit. Данный тип блокировки хранит информацию о потоке-владельце, на основе которой ОС пытается в случае необходимости разрешить инверсию приоритетов.
    * objc_sync
    * spin lock - deprecated in iOS 10, заменен на unfair lock
 
 */
